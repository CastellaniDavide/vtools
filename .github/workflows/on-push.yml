name: Test on every push

on:
  push

jobs:
  test-py:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
    - name: Install Vbox
      run: |
        sudo apt install virtualbox
    - name: Build
      run: |
        python vtools/src/__init__.py -b --debug --csv --url=${{ secrets.SCHOOL_HARPERDB_URL }} --token=${{ secrets.SCHOOL_HARPERDB_TOKEN }}= --OStable=${{ secrets.SCHOOL_HARPERDB_TABLE_OS }} --NETtable=${{ secrets.SCHOOL_HARPERDB_TABLE_NET }}
    - name: Check files
      run: |
        echo "---OS---"
        cat ./OS.csv
        echo "---NET---"
        cat ./net.csv
        
  test-pip:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
        pip install -r requirements/requirements.txt
    - name: ./src => ./
      run: |
        cd vtools
        mv src/__init__.py ./__init__.py
        rmdir src
    - name: Build
      run: |
        python setup.py sdist bdist_wheel

  test-choco:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'
    - name: Install dependences
      run: |
        pip3 install -r requirements/requirements.txt
        pip3 install install pyinstaller vtoolscd
    - name: Create .exe files
      run: |
        cd .\choco\tools
        pyinstaller ..\..\vtools\src\__init__.py
    - name: copy README.md
      run: |
        Copy-Item ".\docs\README.md" -Destination ".\choco"
    - name: Try to build
      run: |
        cd choco
        choco pack
        choco install vtools -d-v -s . --pre -y --force
    - name: Install vbox
      run: |
        choco install virtualbox -y
        md "C:\Work"
        Copy-Item "C:\Program Files\Oracle\VirtualBox\*" -Destination "C:\Work" -Recurse
    - name: Try to run
      run: |
        C:\Progra~1\vtools\vtools.exe -b --debug --csv --url=${{ secrets.SCHOOL_HARPERDB_URL }} --token=${{ secrets.SCHOOL_HARPERDB_TOKEN }}= --OStable=${{ secrets.SCHOOL_HARPERDB_TABLE_OS }} --NETtable=${{ secrets.SCHOOL_HARPERDB_TABLE_NET }}
    - name: Check files
      run: |
        echo "---OS---"
        type ./OS.csv
        echo "---NET---"
        type ./net.csv

  create-deb:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
        sudo apt-get update
        sudo apt-get install build-essential debhelper devscripts equivs dh-virtualenv python3.8 gnupg gnupg2 tree
    - uses: oprypin/find-latest-tag@v1
      with:
        repository: CastellaniDavide/vtools
        releases-only: true 
      id : latest
    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/CastellaniDavide/vtools/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::vtools_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::vtools_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::vtools_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::vtools.$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/vtools_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
      id: envirorment-variables
    - name: Create .deb file
      run: |
        cd debian
        sudo echo "3.0 (native)" > debian/source/format
        dpkg-buildpackage -us -uc

  build-for-ppa:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
        sudo apt-get update
        sudo apt-get install build-essential debhelper devscripts equivs dh-virtualenv python3.8 gnupg gnupg2 tree
    - uses: oprypin/find-latest-tag@v1
      with:
        repository: CastellaniDavide/vtools
        releases-only: true 
      id : latest
    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/CastellaniDavide/vtools/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::vtools_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::vtools_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::vtools_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::vtools.$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/vtools_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
      id: envirorment-variables
    - name: gpg import 
      run: |
        #echo "${{ secrets.GPG_KEY }}" > key.txt
        #LC_ALL=C tr -cd 0-9a-fA-F < key.txt | xxd -r -p > key.asc
        #gpg --batch --passphrase ${{ secrets.GPG_PWS }} --import key.asc
        #sudo echo "export GPGKEY=${{ secrets.GPG_KEY }}" >> ~/.bashrc
        echo "${{ secrets.GPG_PUBKEY }}" > pubkey.txt
        echo "${{ secrets.GPG_SECKEY }}" > seckey.txt
        echo "${{ secrets.GPG_OTRUST }}" > otrust.txt
        LC_ALL=C tr -cd 0-9a-fA-F < pubkey.txt | xxd -r -p > pubkey.asc
        LC_ALL=C tr -cd 0-9a-fA-F < seckey.txt | xxd -r -p > seckey.asc
        gpg --batch --import pubkey.asc
        gpg --batch --passphrase ${{ secrets.GPG_PWS }} --import seckey.asc
        #gpg --import-ownertrust otrust.txt
        sudo echo "export GPGKEY=${{ secrets.GPG_KEY_ID }}" >> ~/.bashrc
        gpg --list-secret-keys
    - name: Create Debian package
      run: |
        tar -czvf ${{ steps.envirorment-variables.outputs.TAR_FILE }} debian/
        tree
        cd ./debian/
        debuild -S -sa -k${{ secrets.GPG_KEY_ID }} -p"gpg --batch --passphrase ${{ secrets.GPG_PWS }} --pinentry-mode loopback"
    - name: Checks files
      run: |
        sudo apt install tree
        tree
